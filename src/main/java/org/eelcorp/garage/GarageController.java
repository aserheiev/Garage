package org.eelcorp.garage;

import org.eelcorp.garage.DBAPI.Fahrzeug;
import org.eelcorp.garage.DBAPI.FahrzeugRepo;
import org.eelcorp.garage.DBAPI.Parkplatz;
import org.eelcorp.garage.DBAPI.ParkplatzRepo;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Random;

/**
 * The REST API controller for the management system, that also serves as a general controller.
 * The app includes an Apache web server that hosts pages that simply make web requests to this controller.
 */
@RestController
public class GarageController {
    private final FahrzeugRepo fahrzeugRepo;
    private final ParkplatzRepo parkplatzRepo;

    public GarageController(final FahrzeugRepo fahrzeugRepo, final ParkplatzRepo parkplatzRepo) {
        this.fahrzeugRepo = fahrzeugRepo;
        this.parkplatzRepo = parkplatzRepo;
    }

    /**
     * @return all parking spots at the API endpoint.
     */
    @GetMapping("/parkplaetze")
    public List<Parkplatz> parkplaetze() {

        return parkplatzRepo.findByOrderById();
    }

    /**
     * @return The amount of free spots in the garage.
     */
    @GetMapping("/freespots")
    public int freeSpots() {
        return parkplatzRepo.countByIstBesetzt(false);
    }
    /**
     * @return The amount of free spots by floor.
     */
    @GetMapping("/freespotsbyfloor")
    public List<FreeSpots> freeSpotsByFloor() {
        return parkplatzRepo.findFreeSpotsByFloor();
    }

    /**
     * Used for registering a parked car.
     * @param parkplatz takes a JSON of format Parkplatz, along with a nested Fahrzeug object.
     */
    @PutMapping("/park")
    public void updateParkplatz(@RequestBody final Parkplatz parkplatz) {
        if (parkplatz.getNummernschild() != null) {
            fahrzeugRepo.save(parkplatz.getNummernschild());
        }
        parkplatzRepo.save(parkplatz);
    }

    /**
     *
     * @param nummernschild The license plate.
     * @return the location of the car in the garage, if exists, in a JSON-serialized Parkplatz object.
     */
    @GetMapping("/fahrzeugposition")
    public ResponseEntity<?> findFahrzeugPosition(@RequestParam String nummernschild) {
        Parkplatz platz = parkplatzRepo.findByNummernschild_Nummernschild(nummernschild);

        if (platz == null) {
            return new ResponseEntity(HttpStatus.NOT_FOUND);
        }
        else {
            return new ResponseEntity<>(platz, HttpStatus.OK);
        }
    }

    /**
     * Reinitializes the DB.
     * @param startDepth The lowest floor. Usually is 0 or 1, but can also be negative if the garage has underground floors.
     * @param floorAmount Amount of floors in the garage.
     * @param parkplatzAmount Amount of parking spots per garage floor.
     * @return Returns 200 OK :)
     */
    @PostMapping("/init")
    private ResponseEntity<?> initDb(@RequestParam int startDepth, @RequestParam int floorAmount, @RequestParam int parkplatzAmount) {
        parkplatzRepo.truncateTable();
        // if I don't do this, the autogenerated IDs will restart at whatever number they were last at
        parkplatzRepo.restartSequence();
        for (int i = 0; i < floorAmount; i++) {
            for (int j = 0; j < parkplatzAmount; j++) {
                Parkplatz parkplatz = new Parkplatz(startDepth, false, null);
                parkplatzRepo.save(parkplatz);
            }
            startDepth++;
        }
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     *
     * @param fahrzeug a JSON object of Fahrzeug format for quick parking.
     * @return the assigned parking spot in JSON Parkplatz format.
     */
    @PutMapping("/instapark")
    private ResponseEntity<?> instapark(@RequestBody Fahrzeug fahrzeug) {
        Random random = new Random();
        // check if it's parked already, that's a mouthful
        if (!parkplatzRepo.existsByNummernschild_Nummernschild(fahrzeug.getNummernschild())) {
            fahrzeugRepo.save(fahrzeug);
            List<Parkplatz> freeSpots = parkplatzRepo.findByIstBesetzt(false);

            if (freeSpots.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.FORBIDDEN);
            }

            int randomGuess = random.nextInt(freeSpots.size());

            Parkplatz parkplatz = freeSpots.get(randomGuess);

            parkplatz.setIstBesetzt(true);
            parkplatz.setNummernschild(fahrzeug);

            parkplatzRepo.save(parkplatz);

            return new ResponseEntity<>(parkplatz, HttpStatus.OK);
        }
        return new ResponseEntity<>(HttpStatus.CONFLICT);
    }
}
